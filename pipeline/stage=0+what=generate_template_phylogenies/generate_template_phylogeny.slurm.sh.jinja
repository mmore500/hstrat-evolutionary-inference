#!/bin/bash -login
########## Define Resources Needed with SBATCH Lines ##########
#SBATCH --time={%if 'production' == runmode%}4:00:00{%else%}1:00:00{%endif%}
#SBATCH --job-name generate_template_phylogeny
#SBATCH --account=devolab
#SBATCH --output="/mnt/home/%u/slurm_job_log/a=generate_template_phylogeny+slurm_job_id=%j+ext.txt"
#SBATCH --mem=8G
#SBATCH --ntasks 1
#SBATCH --cpus-per-task 1
#SBATCH --mail-type=FAIL
# No --mail-user, the default value is the submitting user
#SBATCH --exclude=csn-002,amr-250
# Send interrupt when within 5 minutes of end time.
#SBATCH --signal=SIGINT@300
# Job may be requeued after node failure.
#SBATCH --requeue

{{ setup_instrumentation }}

BATCH="{{ batch }}"
echo "BATCH ${BATCH}"

RUNMODE="{{ runmode }}"
echo "RUNMODE ${RUNMODE}"

REVISION="{{ revision }}"
echo "REVISION ${REVISION}"

{{ setup_production_dependencies }}

STAGE_PATH="${HOME}/outdata/hstrat-evolutionary-inference/runmode={{ runmode }}/stage=0+what=generate_template_phylogenies/"
echo "STAGE_PATH ${STAGE_PATH}"

BATCH_PATH="${STAGE_PATH}/batches/${BATCH}/"
echo "BATCH_PATH ${BATCH_PATH}"

mkdir -p "${BATCH_PATH}"

ln -sfT "${BATCH_PATH}" "${STAGE_PATH}/latest"

PYSCRIPT=$(cat << HEREDOC
import functools
import os
from pathlib import Path
import shutil
import signal
import sys

from hstrat import _auxiliary_lib as hstrat_aux
from hstrat import hstrat
from keyname import keyname as kn
import numpy as np
from tqdm import tqdm


def sigint_handler(signal, frame):
  print("sigint")
  sys.exit(0)

signal.signal(signal.SIGINT, sigint_handler)


config_dict_str = "\n".join(sys.stdin.readlines())
print(f"{config_dict_str=}")

config_dict = eval(config_dict_str)
config_dict["mut_distn"] = eval(config_dict["mut_distn"])

hstrat_aux.seed_random(config_dict["index"])
del config_dict["index"]
del config_dict["replicate"]

epoch_iter = hstrat.evolve_fitness_trait_population(
  iter_epochs = True,
  **config_dict,
  progress_wrap=functools.partial(
    tqdm,
    desc="evolve_fitness_trait_population",
  ),
  tracker_buffer_size=8192 * config_dict['population_size']
)

for epoch, alife_phylogeny_df in tqdm(enumerate(epoch_iter), desc="epoch_iter"):

  outattr_dict = eval(config_dict_str)
  outattr_dict["_index"] = outattr_dict.pop("index")
  out_filename = kn.pack({
    **outattr_dict,
    **{
      "a" : "perfect-phylogeny",
      "epoch" : f"{epoch:05}",
      "_generation" : config_dict["num_generations"] * (epoch + 1),
      "ext" : ".csv.gz",
    }
  })

  out_path = kn.chop(
    f"${BATCH_PATH}/epoch={epoch:05}/{out_filename}",
    mkdir=True
  )

  alife_phylogeny_df.to_csv(
    out_path,
    index=False,
  )

  provlog_path = f"{out_path}.provlog.yaml"
  with open(provlog_path, "w+") as provlog_file:
    provlog_file.write(
f"""-
  a: {provlog_path}
  batch: {{ batch }}
  date: $(date --iso-8601=seconds)
  hostname: $(hostname)
  revision: {{ revision }}
  runmode: {{ runmode }}
  user: $(whoami)
  uuid: $(uuidgen)
  slurm_job_id: ${SLURM_JOB_ID-none}
  stage: 0
  stage 0 batch path: $(readlink -f "${BATCH_PATH}")
"""
    )
    provlog_file.write(
"""  config_dict_str: |
{{ config_dict_str | indent(4, true) }}
"""
    )

  print(f"phylogeny dumped to {out_path}")

HEREDOC
)

echo "CONFIG_DICT_STR {{ config_dict_str }}"

echo "{{ config_dict_str }}" | python3 {% if 'production' == runmode %} -O {% endif %} -c "${PYSCRIPT}"
